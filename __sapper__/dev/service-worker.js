(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1612830672817;

	const files = [
		"/service-worker-index.html",
		"/favicon.png",
		"/index.css",
		"/logo-192.png",
		"/logo-512.png",
		"/logo.png",
		"/manifest.json",
		"/tailwind.css"
	];

	const shell = [
		"/client/client.72add3c8.js",
		"/client/index.66e88f96.js",
		"/client/withdraw.1d8a970b.js",
		"/client/Success.e4574055.js",
		"/client/Loader.d139eb6b.js",
		"/client/discord.670dc7ea.js",
		"/client/index.19182fb9.js",
		"/client/auth.esm.7a3eb8cb.js",
		"/client/register.b69e9f3f.js",
		"/client/logout.86b8e3f0.js",
		"/client/login.edc67a25.js",
		"/client/index.9bc96d86.js",
		"/client/offerwalls.47f407d7.js",
		"/client/promocodes.e0d55e6e.js",
		"/client/giveaway.949625ff.js",
		"/client/invite.48f42d67.js",
		"/client/quests.aa548047.js",
		"/client/link.af1f2971.js",
		"/client/faq.87cb1f51.js",
		"/client/sapper-dev-client.1e7a4a5e.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const staticAssets = new Set(to_cache);

	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});

	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}

				self.clients.claim();
			})
		);
	});


	/**
	 * Fetch the asset from the network and store it in the cache. 
	 * Fall back to the cache if the user is offline.
	 */
	async function fetchAndCache(request) {
		const cache = await caches.open(`offline${timestamp}`);

		try {
			const response = await fetch(request);
			cache.put(request, response.clone());
			return response;
		} catch (err) {
			const response = await cache.match(request);
			if (response) return response;

			throw err;
		}
	}

	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

		const url = new URL(event.request.url);

		// don't try to handle e.g. data: URIs
		const isHttp = url.protocol.startsWith('http');
		const isDevServerRequest = url.hostname === self.location.hostname && url.port !== self.location.port;
		const isStaticAsset = url.host === self.location.host && staticAssets.has(url.pathname);
		const skipBecauseUncached = event.request.cache === 'only-if-cached' && !isStaticAsset;

		if (isHttp && !isDevServerRequest && !skipBecauseUncached) {
			event.respondWith(
				(async () => {
					// always serve static files and bundler-generated assets from cache.
					// if your application has other URLs with data that will never change,
					// set this variable to true for them and they will only be fetched once.
					const cachedAsset = isStaticAsset && await caches.match(event.request);

					// for pages, you might want to serve a shell `service-worker-index.html` file,
					// which Sapper has generated for you. It's not right for every
					// app, but if it's right for yours then uncomment this section
					/*
					if (!cachedAsset && url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
						return caches.match('/service-worker-index.html');
					}
					*/

					return cachedAsset || fetchAndCache(event.request);
				})()
			);
		}
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
